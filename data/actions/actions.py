# actions.py
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import requests
import os
import logging
from dotenv import load_dotenv
import psycopg2

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Database connection parameters from environment variables
DB_CONFIG = {
    "dbname": os.getenv("PGDATABASE"),
    "user": os.getenv("PGUSER"),
    "password": os.getenv("PGPASSWORD"),
    "host": os.getenv("PGHOST"),
    "port": os.getenv("PGPORT"),
}

# Function to establish a database connection
def get_db_connection():
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        logger.error(f"‚ùå Database connection error: {e}")
        return None

# Custom action to get hospital information
class ActionGetHospitalInfo(Action):
    def name(self):
        return "action_get_hospital_info"

    def run(self, dispatcher, tracker, domain):
        hospital_name = tracker.get_slot("hospital_name")
        
        if not hospital_name:
            dispatcher.utter_message(text="–¢–∞ —ç–º–Ω—ç–ª–≥–∏–π–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞. –≠–º–Ω—ç–ª–≥–∏–π–Ω –Ω—ç—Ä—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É.")
            return []
        
        conn = get_db_connection()

        if not conn:
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –¥–∞—Ç–∞–±–µ–π—Å—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
            return []

        try:
            with conn.cursor() as cursor:
                cursor.execute("SELECT name, city, insurance_contract FROM hospitals WHERE name ILIKE %s", (f"%{hospital_name}%",))
                result = cursor.fetchone()
                
                if result:
                    name, city, insurance_contract = result
                    insurance_status = "–≥—ç—Ä—ç—ç—Ç—ç–π" if insurance_contract else "–≥—ç—Ä—ç—ç–≥“Ø–π"
                    response = f"üè• {name} —ç–º–Ω—ç–ª—ç–≥ –Ω—å {city} —Ö–æ—Ç–æ–¥ –±–∞–π—Ä–ª–∞–¥–∞–≥ –±”©–≥”©”©–¥ –≠–ú–î-—Ç–∞–π {insurance_status} –±–∞–π–Ω–∞."
                else:
                    response = f"{hospital_name} —ç–º–Ω—ç–ª–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                
                dispatcher.utter_message(text=response)
        except Exception as e:
            logger.error(f"‚ùå Error fetching hospital info: {e}")
            dispatcher.utter_message(text="–ú—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
        finally:
            if conn:
                conn.close()

        return []

# Custom action to get medicine information
class ActionGetMedicineInfo(Action):
    def name(self):
        return "action_get_medicine_info"

    def run(self, dispatcher, tracker, domain):
        tablet_name = tracker.get_slot("tablet_name")
        
        if not tablet_name:
            dispatcher.utter_message(text="–¢–∞ —ç–º–∏–π–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞. –≠–º–∏–π–Ω –Ω—ç—Ä—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É.")
            return []
        
        conn = get_db_connection()

        if not conn:
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –¥–∞—Ç–∞–±–µ–π—Å—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
            return []

        try:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT tablet_name_sales, tablet_name_mon, icd10_name, unit_price, unit_discount 
                    FROM medicines 
                    WHERE tablet_name_sales ILIKE %s OR tablet_name_mon ILIKE %s 
                    LIMIT 5
                """, (f"%{tablet_name}%", f"%{tablet_name}%"))
                
                results = cursor.fetchall()
                
                if results:
                    response = f"üíä {tablet_name} —ç–º–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª:\n\n"
                    
                    for i, (sales_name, mon_name, icd10_name, price, discount) in enumerate(results, 1):
                        discount_percent = int((discount / price) * 100) if price and discount else 0
                        response += f"{i}. {sales_name} ({mon_name})\n"
                        response += f"   –•—ç—Ä—ç–≥–ª—ç—Ö: {icd10_name}\n"
                        response += f"   “Æ–Ω—ç: {int(price)}‚ÇÆ | –•”©–Ω–≥”©–ª”©–ª—Ç: {discount_percent}% ({int(discount)}‚ÇÆ)\n\n"
                else:
                    response = f"{tablet_name} —ç–º–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                
                dispatcher.utter_message(text=response)
        except Exception as e:
            logger.error(f"‚ùå Error fetching medicine info: {e}")
            dispatcher.utter_message(text="–ú—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
        finally:
            if conn:
                conn.close()

        return []

# Custom action to get insurance fee information
class ActionGetInsuranceFee(Action):
    def name(self):
        return "action_get_insurance_fee"

    def run(self, dispatcher, tracker, domain):
        current_year = 2025
        current_month = 3
        
        fee_data = {
            2019: {"monthly": 3200, "yearly": 38400},
            2020: {"monthly": 4200, "yearly": 50400},
            2021: {"monthly": 4200, "yearly": 50400},
            2022: {"monthly": 4200, "yearly": 50400},
            2023: {"monthly": 5500, "yearly": 66000},
            2024: {"monthly": 6600, "yearly": 79200},
            2025: {"monthly_q1": 13200, "monthly_q2plus": 15840}
        }
        
        response = "üìä –≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω –¥–∞–∞—Ç–≥–∞–ª—ã–Ω —à–∏–º—Ç–≥—ç–ª–∏–π–Ω —Ö—ç–º–∂—ç—ç:\n\n"
        
        for year in sorted(fee_data.keys()):
            fee = fee_data[year]
            if year == 2025:
                if current_year == 2025 and current_month <= 3:
                    response += f"**{year} –æ–Ω (–û–¥–æ–æ–≥–∏–π–Ω)**: –°–∞—Ä—ã–Ω {fee['monthly_q1']}‚ÇÆ (1-3 —Å–∞—Ä), 4-—Ä —Å–∞—Ä–∞–∞—Å {fee['monthly_q2plus']}‚ÇÆ\n"
                else:
                    response += f"{year} –æ–Ω: –°–∞—Ä—ã–Ω {fee['monthly_q1']}‚ÇÆ (1-3 —Å–∞—Ä), 4-—Ä —Å–∞—Ä–∞–∞—Å {fee['monthly_q2plus']}‚ÇÆ\n"
            else:
                if year == current_year:
                    response += f"**{year} –æ–Ω (–û–¥–æ–æ–≥–∏–π–Ω)**: –°–∞—Ä—ã–Ω {fee['monthly']}‚ÇÆ, –∂–∏–ª–∏–π–Ω {fee['yearly']}‚ÇÆ\n"
                else:
                    response += f"{year} –æ–Ω: –°–∞—Ä—ã–Ω {fee['monthly']}‚ÇÆ, –∂–∏–ª–∏–π–Ω {fee['yearly']}‚ÇÆ\n"
        
        dispatcher.utter_message(text=response)
        return []

# Custom action to get services information
class ActionGetServices(Action):
    def name(self):
        return "action_get_services"

    def run(self, dispatcher, tracker, domain):
        services = [
            "–•—ç–≤—Ç“Ø“Ø–ª—ç–Ω —ç–º—á–ª—ç—Ö —Ç—É—Å–ª–∞–º–∂, “Ø–π–ª—á–∏–ª–≥—ç—ç",
            "–ê–º–±—É–ª–∞—Ç–æ—Ä–∏–π–Ω —Ç—É—Å–ª–∞–º–∂, “Ø–π–ª—á–∏–ª–≥—ç—ç",
            "”®–Ω–¥”©—Ä ”©—Ä—Ç”©–≥—Ç—ç–π –æ–Ω–æ—à–∏–ª–≥–æ–æ, —à–∏–Ω–∂–∏–ª–≥—ç—ç",
            "–Ø–∞—Ä–∞–ª—Ç–∞–π —Ç—É—Å–ª–∞–º–∂",
            "–¢“Ø—Ä–≥—ç–Ω —Ç—É—Å–ª–∞–º–∂",
            "–¢–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω",
            "”®–¥—Ä–∏–π–Ω —ç–º—á–∏–ª–≥—ç—ç, “Ø–π–ª—á–∏–ª–≥—ç—ç",
            "–î–∏–∞–ª–∏–∑—ã–Ω —Ç—É—Å–ª–∞–º–∂, “Ø–π–ª—á–∏–ª–≥—ç—ç",
            "–•–æ—Ä—Ç —Ö–∞–≤–¥—Ä—ã–Ω —Ö–∏–º–∏, —Ç—É—è–∞–Ω—ã ”©–¥—Ä–∏–π–Ω —ç–º—á–∏–ª–≥—ç—ç",
            "–°—ç—Ä–≥—ç—ç–Ω –∑–∞—Å–∞—Ö —Ç—É—Å–ª–∞–º–∂, “Ø–π–ª—á–∏–ª–≥—ç—ç",
            "–•”©–Ω–≥”©–≤—á–ª”©—Ö —Ç—É—Å–ª–∞–º–∂ “Ø–π–ª—á–∏–ª–≥—ç—ç",
            "–£–ª–∞–º–∂–ª–∞–ª—Ç –∞–Ω–∞–≥–∞–∞—Ö —É—Ö–∞–∞–Ω—ã —Ç—É—Å–ª–∞–º–∂, “Ø–π–ª—á–∏–ª–≥—ç—ç",
            "–≠–º–∏–π–Ω “Ø–Ω–∏–π–Ω —Ö”©–Ω–≥”©–ª”©–ª—Ç"
        ]
        
        response = "üè• –≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω –¥–∞–∞—Ç–≥–∞–ª–∞–∞—Ä –∞–≤–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π “Ø–π–ª—á–∏–ª–≥—ç—ç–Ω“Ø“Ø–¥:\n\n"
        
        for i, service in enumerate(services, 1):
            response += f"{i}. {service}\n"
        
        dispatcher.utter_message(text=response)
        return []

# Custom action to get general insurance information
class ActionGetInsuranceInfo(Action):
    def name(self):
        return "action_get_insurance_info"

    def run(self, dispatcher, tracker, domain):
        info = """üìã **–≠—Ä“Ø“Ø–ª –ú—ç–Ω–¥–∏–π–Ω –î–∞–∞—Ç–≥–∞–ª (–≠–ú–î) –≥—ç–∂ —é—É –≤—ç?**

–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω –¥–∞–∞—Ç–≥–∞–ª –Ω—å –∏—Ä–≥—ç–¥–∏–π–Ω —ç—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω —É–ª–º–∞–∞—Å “Ø“Ø—Å—Å—ç–Ω —Å–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω —ç—Ä—Å–¥—ç–ª–∏–π–≥ —Ö—É–≤–∞–∞–ª—Ü–∞—Ö —ç–≤ —Å–∞–Ω–∞–∞–Ω—ã –Ω—ç–≥–¥—ç–ª —é–º. –ò—Ä–≥—ç–¥ —Å–∞—Ä –±“Ø—Ä —Ç–æ–≥—Ç–º–æ–ª —à–∏–º—Ç–≥—ç–ª —Ç”©–ª—Å–Ω”©”©—Ä:

1Ô∏è‚É£ ”®”©—Ä–∏–π–Ω –±–æ–ª–æ–Ω –±—É—Å–¥—ã–Ω —ç—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω —ç—Ä—Å–¥—ç–ª–∏–π–≥ –¥–∞–∞—Ç–≥—É—É–ª–¥–∞–≥
2Ô∏è‚É£ –•”©–Ω–≥”©–ª”©–ª—Ç—Ç—ç–π —ç–º—á–∏–ª–≥—ç—ç, –æ–Ω–æ—à–∏–ª–≥–æ–æ, —à–∏–Ω–∂–∏–ª–≥—ç—ç —Ö–∏–π–ª–≥—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π
3Ô∏è‚É£ 600 –≥–∞—Ä—É–π –Ω—ç—Ä —Ç”©—Ä–ª–∏–π–Ω —ç–º–∏–π–≥ 30-100% —Ö”©–Ω–≥”©–ª”©–ª—Ç—Ç—ç–π –∞–≤–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π
4Ô∏è‚É£ –ì—ç—Ä—ç—ç—Ç —ç–º–Ω—ç–ª–≥“Ø“Ø–¥—ç—ç—Ä “Ø–π–ª—á–ª“Ø“Ø–ª—ç—Ö —ç—Ä—Ö—Ç—ç–π

–î–∞–∞—Ç–≥–∞–ª –Ω—å —Ç–∞–Ω—ã –±–æ–ª–æ–Ω —Ç–∞–Ω—ã –≥—ç—Ä –±“Ø–ª–∏–π–Ω —ç—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω –∞—Å—É—É–¥–∞–ª–¥ —Å–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω –¥—ç–º–∂–ª—ç–≥ “Ø–∑“Ø“Ø–ª–∂, –∞–º—å–¥—Ä–∞–ª—ã–Ω —á–∞–Ω–∞—Ä—ã–≥ —Ç–∞–Ω—å —Å–∞–π–∂—Ä—É—É–ª–∞—Ö–∞–¥ —Ç—É—Å–∞–ª–Ω–∞."""
        
        dispatcher.utter_message(text=info)
        return []

# Custom action to save unanswered questions
class ActionSaveUnansweredQuestion(Action):
    def name(self):
        return "action_save_unanswered_question"

    def run(self, dispatcher, tracker, domain):
        question = tracker.latest_message.get('text')
        
        if not question:
            return []
        
        conn = get_db_connection()

        if not conn:
            logger.error("Could not connect to database to save unanswered question")
            return []

        try:
            with conn.cursor() as cursor:
                cursor.execute("INSERT INTO unanswered_questions (question) VALUES (%s)", (question,))
                conn.commit()
                logger.info(f"Saved unanswered question: {question}")
        except Exception as e:
            logger.error(f"‚ùå Error saving question: {e}")
            conn.rollback()
        finally:
            if conn:
                conn.close()

        return []