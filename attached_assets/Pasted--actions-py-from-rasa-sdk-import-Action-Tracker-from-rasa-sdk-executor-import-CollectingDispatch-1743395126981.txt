# actions.py
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import psycopg2
import os
from dotenv import load_dotenv
import logging

# Load environment variables from .env file
load_dotenv()

# Database configuration
DB_CONFIG = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST"),
    "port": os.getenv("DB_PORT"),
}

# Initialize logging
logging.basicConfig(level=logging.DEBUG)

# Function to establish a database connection
def get_db_connection():
    try:
        return psycopg2.connect(**DB_CONFIG)
    except Exception as e:
        logging.error(f"‚ùå Database connection error: {e}")
        return None

# Custom action to get hospital information
class ActionGetHospitalInfo(Action):
    def name(self):
        return "action_get_hospital_info"

    def run(self, dispatcher, tracker, domain):
        hospital_name = tracker.get_slot("hospital_name")
        
        if not hospital_name:
            dispatcher.utter_message(text="–¢–∞ —ç–º–Ω—ç–ª–≥–∏–π–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞. –≠–º–Ω—ç–ª–≥–∏–π–Ω –Ω—ç—Ä—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É.")
            return []
        
        conn = get_db_connection()

        if not conn:
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –¥–∞—Ç–∞–±–µ–π—Å—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
            return []

        try:
            with conn.cursor() as cursor:
                cursor.execute("SELECT HS_NAME, HS_ADDRESS FROM HOSPITAL WHERE HS_NAME LIKE %s LIMIT 1", (f"%{hospital_name}%",))
                result = cursor.fetchone()
                
                if result:
                    name, address = result
                    response = f"üè• {name} —ç–º–Ω—ç–ª—ç–≥. –•–∞—è–≥: {address}"
                else:
                    response = f"{hospital_name} —ç–º–Ω—ç–ª—ç–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                
                dispatcher.utter_message(text=response)
        except Exception as e:
            logging.error(f"‚ùå Error fetching hospital info: {e}")
            dispatcher.utter_message(text="–ú—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
        finally:
            if conn:
                conn.close()

        return []

# Custom action to save unanswered questions
class ActionSaveUnansweredQuestion(Action):
    def name(self):
        return "action_save_unanswered_question"

    def run(self, dispatcher, tracker, domain):
        question = tracker.latest_message['text']
        conn = get_db_connection()

        if not conn:
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –¥–∞—Ç–∞–±–µ–π—Å—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
            return []

        try:
            with conn.cursor() as cursor:
                cursor.execute("INSERT INTO unanswered_questions (question) VALUES (%s)", (question,))
                conn.commit()
                dispatcher.utter_message(text="üìå –£—É—á–ª–∞–∞—Ä–∞–π, –±–∏ —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞–º–∞–∞—Ä–∞—Ö –º—ç–¥—ç—ç–ª—ç–ª–¥ —Ö–∞—Ä–∞–∞—Ö–∞–Ω —Å—É—Ä–∞–ª—Ü–∞–∞–≥“Ø–π –±–∞ —É–¥–∞—Ö–≥“Ø–π —Å—É—Ä–∞–ª—Ü—Å–∞–Ω –±–∞–π—Ö –±–æ–ª–Ω–æ.")
        except Exception as e:
            logging.error(f"‚ùå Error saving question: {e}")
            dispatcher.utter_message(text="–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞, —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
        finally:
            if conn:
                conn.close()

        return []